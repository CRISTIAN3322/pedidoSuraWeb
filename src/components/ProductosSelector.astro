---
// Import products data from JSON file
import products from '../data/products.json';
// Obtener proveedores únicos
const proveedores = Array.from(
  new Set(
    products
      .filter(p => p.activo)
      .map(p => p.proveedor)
  )
).sort((a, b) => a.localeCompare(b));
---

<div class="filter-container">
    <label for="proveedorSelect">Filtrar por proveedor:</label>
    <select id="proveedorSelect" class="proveedor-select">
        <option value="">Todos</option>
        {proveedores.map((prov) => (
            <option value={prov}>{prov}</option>
        ))}
    </select>
</div>

<div class="search-container">
    <input 
        type="text" 
        id="searchInput" 
        placeholder="Buscar por nombre o código..." 
        class="search-input"
    />
</div>

<div class="products-container">
    {products.map((product) => (
        <div class="product-card" data-active={product.activo} data-product-name={product.nombre.toLowerCase()} data-product-code={product.codigo} data-product-barcode={product.barra} data-product-proveedor={product.proveedor} style={Number(product.invetario) < 1 ? 'background-color: #ffb3b3;' : ''}>
        <div class="imagen-card">
            {product.imagen && <img src={product.imagen} alt={product.nombre} class="imagen-Product"/>}
        </div>
            <h3>{product.nombre}</h3>
            <p class="code">Código: {product.codigo}</p>
            <p class="price">${product.precio}</p>
            <p class={"inventory" + (Number(product.invetario) < 1 ? ' inventory-low' : '')}>Stock: {product.invetario}</p>
            <p class="barcode">Código de Barras: {product.barra}</p>
            
            <div class="quantity-control">
                <button class="quantity-btn minus" data-product-id={product.codigo}>-</button>
                <input 
                    type="number" 
                    class="quantity-input" 
                    value="0" 
                    min="0"
                    data-product-id={product.codigo}
                />
                <button class="quantity-btn plus" data-product-id={product.codigo}>+</button>
            </div>
            <button class="add-to-cart-btn" data-product-id={product.codigo}>
                Agregar al Carrito
            </button>
        </div>
    ))}
</div>

<script>
    // Filtro por proveedor y búsqueda
    function filterProducts(searchTerm = '', proveedor = '') {
        const productCards = document.querySelectorAll('.product-card');
        searchTerm = searchTerm.toLowerCase().trim();
        proveedor = proveedor.trim();

        productCards.forEach(card => {
            const productName = (card as HTMLElement).dataset.productName || '';
            const productCode = (card as HTMLElement).dataset.productCode || '';
            const productBarcode = (card as HTMLElement).dataset.productBarcode || '';
            const productProveedor = (card as HTMLElement).dataset.productProveedor || '';
            const isActive = (card as HTMLElement).dataset.active === 'true';

            const matchesProveedor = !proveedor || productProveedor === proveedor;
            const matches = (
                (productName.includes(searchTerm) || 
                productCode.toLowerCase().includes(searchTerm) || 
                productBarcode.toLowerCase().includes(searchTerm)) &&
                isActive &&
                matchesProveedor
            );
            (card as HTMLElement).style.display = matches ? 'block' : 'none';
        });
    }

    // Ejecutar el filtro inicial para ocultar productos inactivos al cargar
    window.addEventListener('DOMContentLoaded', () => {
        filterProducts('', '');
    });

    // Evento de búsqueda y proveedor
    const searchInput = document.getElementById('searchInput');
    const proveedorSelect = document.getElementById('proveedorSelect');
    if (searchInput && proveedorSelect) {
        const updateFilter = () => {
            filterProducts((searchInput as HTMLInputElement).value, (proveedorSelect as HTMLSelectElement).value);
        };
        searchInput.addEventListener('input', updateFilter);
        proveedorSelect.addEventListener('change', updateFilter);
    }

    // Manejo de la cantidad de productos
    document.querySelectorAll('.quantity-control').forEach(control => {
        const input = control.querySelector('.quantity-input') as HTMLInputElement;
        const minusBtn = control.querySelector('.minus') as HTMLButtonElement;
        const plusBtn = control.querySelector('.plus') as HTMLButtonElement;

        if (!input || !minusBtn || !plusBtn) return;

        minusBtn.addEventListener('click', () => {
            const currentValue = parseInt(input.value) || 0;
            if (currentValue > 0) {
                input.value = (currentValue - 1).toString();
            }
        });

        plusBtn.addEventListener('click', () => {
            const currentValue = parseInt(input.value) || 0;
            input.value = (currentValue + 1).toString();
        });

        input.addEventListener('change', (e: Event) => {
            const target = e.target as HTMLInputElement;
            let value = parseInt(target.value) || 0;
            if (value < 0) value = 0;
            target.value = value.toString();
        });
    });

    // Manejo de agregar al carrito
    document.querySelectorAll('.add-to-cart-btn').forEach(button => {
        button.addEventListener('click', (e) => {
            const btn = e.target as HTMLButtonElement;
            const productId = btn.dataset.productId;
            const card = btn.closest('.product-card');
            const quantityInput = card?.querySelector('.quantity-input') as HTMLInputElement;
            const quantity = parseInt(quantityInput?.value || '0');

            if (quantity > 0) {
                // Obtener información del producto
                const productName = card?.querySelector('h3')?.textContent || '';
                const priceText = card?.querySelector('.price')?.textContent || '';
                const price = parseFloat(priceText.replace('$', '').trim());

                // Obtener carrito actual del localStorage
                const currentCart = JSON.parse(localStorage.getItem('cartItems') || '[]');
                
                // Buscar si el producto ya existe en el carrito
                const existingItemIndex = currentCart.findIndex((item: any) => item.codigo === productId);
                
                if (existingItemIndex >= 0) {
                    // Actualizar cantidad si el producto ya existe
                    currentCart[existingItemIndex].cantidad += quantity;
                } else {
                    // Agregar nuevo producto al carrito
                    currentCart.push({
                        codigo: productId,
                        nombre: productName,
                        precio: price,
                        cantidad: quantity
                    });
                }

                // Guardar carrito actualizado
                localStorage.setItem('cartItems', JSON.stringify(currentCart));

                // Mostrar mensaje y resetear cantidad
                alert(`Producto agregado al carrito - Cantidad: ${quantity}`);
                quantityInput.value = '0';

                // Opcional: Redirigir al carrito
                if (confirm('¿Desea ir al carrito?')) {
                    window.location.href = '/carrito';
                }
            } else {
                alert('Por favor seleccione una cantidad mayor a 0');
            }
        });
    });
</script>

<style>
    .filter-container {
        max-width: 1400px;
        margin: 1.5rem auto 1rem;
        padding: 0 1.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        background: #f7fafc;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(44, 82, 130, 0.08);
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    .filter-container label {
        font-weight: bold;
        color: #2c5282;
        font-size: 1.1rem;
        margin-right: 0.5rem;
    }
    .proveedor-select {
        padding: 0.6rem 1.2rem;
        border-radius: 8px;
        border: 2px solid #73f806;
        font-size: 1rem;
        background: #fff;
        color: #2c5282;
        box-shadow: 0 1px 4px rgba(44, 82, 130, 0.07);
        transition: border-color 0.2s, box-shadow 0.2s;
        outline: none;
        cursor: pointer;
    }
    .proveedor-select:focus, .proveedor-select:hover {
        border-color: #38a169;
        box-shadow: 0 2px 8px rgba(56, 161, 105, 0.12);
    }
    .proveedor-select option {
        color: #2c5282;
        background: #f7fafc;
    }

    .search-container {
        max-width: 1400px;
        margin: 2rem auto 1rem;
        padding: 0 1.5rem;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        border: 2px solid #ddd;
        border-radius: 8px;
        transition: border-color 0.2s ease;
    }

    .search-input:focus {
        outline: none;
        border-color: #2c5282;
    }

    .products-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
        padding: 1.5rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .product-card {
        border: 1px solid #ddd;
        border-radius: 12px;
        padding: 1.2rem 1rem 1rem 1rem;
        text-align: center;
        background: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        height: 500px; /* Altura fija para todas las tarjetas */
        box-sizing: border-box;
        overflow: hidden;
    }

    .imagen-card {
        height: 160px;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 0.7rem;
        overflow: hidden;
    }

    .imagen-Product {
        max-width: 120px;
        max-height: 140px;
        width: auto;
        object-fit: contain;
        margin: 0 auto;
        display: block;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .product-card img {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .product-card h3 {
        color: #1a365d;
        margin-bottom: 0.4rem;
        font-size: 1.1rem;
        min-height: 2.2em;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
    }

    .inventory {
        font-size: 1rem;
        color: #38a169;
        font-weight: bold;
        margin: 0.2rem 0 0.4rem 0;
    }
    .inventory-low {
        color: #e53e3e !important;
    }

    .code {
        font-size: 0.9rem;
        color: #666;
        margin: 0.2rem 0;
    }

    .price {
        font-weight: bold;
        color: #2c5282;
        font-size: 1.15rem;
        margin: 0.2rem 0 0.4rem 0;
    }

    .barcode {
        font-family: monospace;
        font-size: 0.9rem;
        color: #4a5568;
        margin: 0.2rem 0 0.5rem 0;
        padding: 0.3rem;
        background: #f7fafc;
        border-radius: 6px;
        width: 100%;
        box-sizing: border-box;
        word-break: break-all;
    }

    /* Estilo para productos inactivos */
    .product-card[data-active="false"] {
        opacity: 0.7;
        background-color: #f8f9fa;
    }

    /* Media queries para mejor responsividad */
    @media (max-width: 640px) {
        .filter-container {
            flex-direction: column;
            align-items: stretch;
            gap: 0.5rem;
            padding: 1rem 0.5rem;
        }
        .filter-container label {
            margin-bottom: 0.25rem;
            font-size: 1rem;
        }
        .proveedor-select {
            width: 100%;
            font-size: 1rem;
            padding: 0.7rem 1rem;
        }
        .products-container {
            padding: 1rem;
            gap: 1rem;
        }

        .product-card {
            height: auto;
            min-height: 420px;
            padding: 0.7rem 0.3rem 1rem 0.3rem;
        }
        .imagen-card {
            height: 120px;
        }
        .imagen-Product {
            max-width: 90px;
            max-height: 100px;
        }
        .barcode {
            font-size: 0.8rem;
            padding: 0.2rem;
        }
        .add-to-cart-btn {
            font-size: 0.95rem;
            padding: 0.5rem 0.7rem;
        }
    }

    .quantity-control {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
        width: 100%;
    }

    .quantity-btn {
        background-color: #2c5282;
        color: white;
        border: none;
        border-radius: 4px;
        width: 30px;
        height: 30px;
        cursor: pointer;
        font-size: 1.2rem;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s ease;
    }

    .quantity-btn:hover {
        background-color: #1a365d;
    }

    .quantity-input {
        width: 50px;
        height: 30px;
        text-align: center;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }

    .quantity-input:focus {
        outline: 2px solid #2c5282;
        border-color: transparent;
    }

    /* Eliminar flechas del input number */
    .quantity-input::-webkit-inner-spin-button,
    .quantity-input::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .quantity-input[type=number] {
        -moz-appearance: textfield;
    }

    .add-to-cart-btn {
        margin-top: 0.5rem;
        background-color: #48bb78;
        color: white;
        border: none;
        border-radius: 6px;
        padding: 0.6rem 1.2rem;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.2s ease;
        width: 100%;
        box-sizing: border-box;
    }

    .add-to-cart-btn:hover {
        background-color: #38a169;
    }
</style>
